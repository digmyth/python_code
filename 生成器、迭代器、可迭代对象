
参考： https://github.com/wxqpython/CRM_project/edit/master/%E7%BB%84%E5%90%88%E7%AD%9B%E9%80%89%E6%9F%A5%E8%AF%A2

一、生成器、迭代器、可迭代对象
    迭代器：能够作用于next()函数，不断向后返回值，称为迭代器 iter([1,2,3,4])
    生成器：yield返回，并且可以next(),是一种特殊的迭代器
    可迭代对象：对象或一个类中有__iter__()方法，并返回迭代器(包括生成器),那么这个对象可for循环

二、代码片断
'''
class Foo():
    def f1(self):
        result = []
        for i in [1,2,3,4,5]:
            result.append(i)
        return result

obj = Foo()
for x in obj.f1():
    print(x)
'''

提高上面代码运行效率，可以改用yield
'''
class Foo():
    def f1(self):
        for i in [1,2,3,4,5,6]:
            yield i

obj = Foo()
for x in obj.f1():
    print(x)
'''

三、可迭代对象：对象或一个类中有__iter__()方法，并返回迭代器(包括生成器),那么这个对象可for循环
'''
class Foo():
    def __iter__(self):
        for i in [1,2,3,4,5]:
            yield i

for i in Foo():
    print(i)
'''

#加上类封装代码就牛逼了, 打印abc5次
'''
class Foo():
    def __init__(self,data):
        self.data = data

    def __iter__(self):
        for m in self.data:
            yield m

class Changelist():
    def f1(self):
        for n in [1,2,3,4,5]:
            yield Foo(['a','b','c'])

cl  = Changelist()
for i in cl.f1():
    for x in i:
        print(x,end=" ")
'''

四、待续。。。



五、升级： CRM_Project组合筛选中用到

class Foo():
   def __init__(self,queryset,is_choice=False):
       self.queryset = queryset
       self.is_choice = is_choice

   def __iter__(self):
       yield '<a>全部</a>'
       for row in self.queryset:
           yield mark_safe('<a>运营</a>')
      
class Changelist():
    def __init__(self,config):
        self.comb_filter = config.comb_filter
    # def show_comb_search(self, ):   # 这里循环好了数据，但前端还要循环一次，很不好，我们把这里变为生成器不是很good么,天才
    #     result = []
    #     for name in self.comb_filter:  # ['gender','status','dp']
    #         row = Foo(models.UserInfo.objects.all())  # 所有用户变为一个列表或可循环对象
    #         result.append(row)
    def show_comb_search(self, ):
        for name in self.comb_filter:  # ['gender','status','dp']
            yield Foo(models.UserInfo.objects.all())  # 所有用户变为一个列表或可循环对象,直接yield



